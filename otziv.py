
import asyncio
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import os

# üîê –ó–∞–≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()  # –≠—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞

API_TOKEN = os.getenv('API_TOKEN')  # –ü–æ–ª—É—á–∞–µ–º API_TOKEN –∏–∑ .env —Ñ–∞–π–ª–∞
ADMINS = [140898735, 6705001934, 7310818609, 7947666885]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user_id

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_data = {}

def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[ 
            [KeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
            [KeyboardButton(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

def get_bonus_inline_kb():
    return InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="üéÅ –ú–∞–Ω—É–∞–ª—å–Ω–∞—è –¢–µ—Ä–∞–ø–∏—è", callback_data="bonus_–ú–∞–Ω—É–∞–ª—å–Ω–∞—è –¢–µ—Ä–∞–ø–∏—è")],
        [InlineKeyboardButton(text="üéÅ –ë–∞–Ω–æ—á–Ω—ã–π –º–∞—Å—Å–∞–∂", callback_data="bonus_–ë–∞–Ω–æ—á–Ω—ã–π –º–∞—Å—Å–∞–∂")],
        [InlineKeyboardButton(text="üéÅ –ú–∞—Å—Å–∞–∂ –õ–∏—Ü–∞", callback_data="bonus_–ú–∞—Å—Å–∞–∂ –õ–∏—Ü–∞")],
        [InlineKeyboardButton(text="üéÅ –ú–∞—Å—Å–∞–∂ –®–í–ó", callback_data="bonus_–ú–∞—Å—Å–∞–∂ –®–í–ó")]
    ])

@dp.message(CommandStart())
async def start(message: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

@dp.message(F.contact)
async def handle_contact(message: Message):
    uid = message.from_user.id
    user_data[uid] = {
        'phone': message.contact.phone_number,
        'messages': [],
        'bonus': None
    }
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.)."
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª.",
        reply_markup=get_main_kb()
    )

@dp.message(F.text | F.photo | F.video | F.video_note)
async def collect_messages(message: Message):
    uid = message.from_user.id

    if uid not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    text = message.text.strip().lower() if message.text else ""

    if text.startswith("‚úÖ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"):
        await confirm_send(message)
        return
    elif text.startswith("üîÑ –æ—á–∏—Å—Ç–∏—Ç—å"):
        await clear_review(message)
        return

    user_data[uid]['messages'].append(message)
    await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–∑—ã–≤.")
    print(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.content_type}")

async def confirm_send(message: Message):
    uid = message.from_user.id
    data = user_data.get(uid)

    if not data or not data.get("messages"):
        await message.answer("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–∑—ã–≤–∞.")
        return

    phone = data['phone']
    messages = data['messages']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data[uid]['sent'] = messages.copy()
    user_data[uid]['messages'] = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        await bot.send_message(admin_id, f"üìû –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç: {phone}")
        for msg in messages:
            if msg.text:
                await bot.send_message(admin_id, msg.text)
            elif msg.photo:
                await bot.send_photo(admin_id, photo=msg.photo[-1].file_id, caption=msg.caption or "")
            elif msg.video:
                await bot.send_video(admin_id, video=msg.video.file_id, caption=msg.caption or "")
            elif msg.video_note:
                await bot.send_video_note(admin_id, video_note=msg.video_note.file_id)

    # –£–¥–∞–ª—è–µ–º reply-–∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–æ–Ω—É—Å
    await message.answer(
        "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–Ω—É—Å–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É:",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã:",
        reply_markup=get_bonus_inline_kb()
    )

@dp.callback_query(F.data.startswith("bonus_"))
async def handle_bonus_choice(callback: CallbackQuery):
    uid = callback.from_user.id
    if uid not in user_data or not user_data[uid].get('sent'):
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤.")
        return

    bonus_text = callback.data.replace("bonus_", "")
    user_data[uid]['bonus'] = bonus_text
    phone = user_data[uid]['phone']

    for admin_id in ADMINS:
        await bot.send_message(admin_id, f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {phone} üéÅ –í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å: {bonus_text}")

    await callback.message.edit_text(f"üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à –±–æ–Ω—É—Å ¬´{bonus_text}¬ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    # –û—á–∏—Å—Ç–∫–∞
    user_data[uid]['sent'] = []
    user_data[uid]['bonus'] = None

async def clear_review(message: Message):
    uid = message.from_user.id
    if uid not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    if not user_data[uid].get('messages'):
        await message.answer("–í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.")
        return

    user_data[uid]['messages'] = []
    await message.answer("üóëÔ∏è –û—Ç–∑—ã–≤ –æ—á–∏—â–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

@dp.message(F.text)
async def debug_text(message: Message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {message.text}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
